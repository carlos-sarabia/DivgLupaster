#!/bin/sh

############################################################
## Pre-processing pipeline for wild canids genome mapping ##
############################################################

# This is a generic script to follow a pre-processing pipeline for any wild canid after adapter trimming. 
# Steps will be: mapping piped with sorting and read groups addition, marking duplicates and indel realignment.
# Depending on how many libraries we have for the same specimen, we will need to repeat the mapping step or not. 
# However, the high efficiency of the mapping step allows a 30-40 Gb raw data library to be mapped in around 5 hours. 
# This whole pipeline should last less than 16 hours to complete. 

###################################
## Variable and PATHs definition ##
###################################
# We will have five PATHs:

# PATH to all intermediate (.bam) files of this pipeline
BAMFOLD='/path/to/bamfolder'
# PATH to all sanity checks (flagstat files)
FLAGFOLD='/path/to/flagstat/output'
# PATH for temporary files generated by bwa mem
TEMP='/path/to/store/temporary/files'
# PATH where our program executables are stored (can also be defined as variables)
PROG='/path/to/programs/folder'
# PATH with the fasta reference genome (in this case domestic dog CanFam3.1 - Lindblad-Toh et al., (2005), 
# but can be also Lycaon pictus - Campana et al., (2016)
REF='/path/to/ref/CanFam3.1'

#################################################################
## Mapping genomes with bwa mem and sorting with samtools sort ##
#################################################################

#########################
# As an example, we are mapping one of the libraries of the Algerian African golden wolf - Liu et al., (2018) after adapter trimming.
# This step is composed of two piped scripts: mapping with bwa mem and directly sorting the output as a compressed (.bam) file.
# This step needs to be repeated for every library of the same specimen. 
#########################
# Parameters of bwa mem: multithreaded (-t 18), incorporate read groups (-R), with tID (name of group of libraries, given by us),
# accession name (tSM), sequencing platform name (tPL), library name (tLB), reads length (tPI). 
# For further description of tag names in -bam files, see http://samtools.github.io/hts-specs/
# For further description of bwa mem features, see http://bio-bwa.sourceforge.net/bwa.shtml
#########################
# Parameters of samtools sort: divide in chunks of 500Mb (-m), use $TEMP as temporary folder (-T), use 18 threads (-@18), 
# export as compressed file (-O bam), use output of previously piped program (-).
# For further description of samtools sort features, see http://www.htslib.org/doc/samtools-sort.html
#########################

$PROG/bwa/bwa mem -M -t 18 -R "@RG\tID:awolf_algeria\tSM:SAMC009005\tPL:ILLUMINA\tLB:C4PCGANXX_6\tPU:awolf_algeria1\tPI:100" $REF $BAMFOLD/C4PCGANXX_6.trimmed.R1.fastq.gz $BAMFOLD/C4PCGANXX_6.trimmed.R2.fastq.gz | $PROG/samtools/samtools sort -m 500M -T $TEMP -@18 -O bam -o $BAMFOLD/C4PCGANXX_6.spr.bam -

# To see if this step worked well, we apply samtools flagstat to check out reads. 
$PROG/samtools/samtools flagstat $BAMFOLD/C4PCGANXX_6.spr.bam > $FLAGFOLD/fstat.C4PCGANXX_6.spr.txt

# This step shall be repeated for every library (C4PU7ANXX_4, C4PU7ANXX_5, C4PU7ANXX_4) of the same individual changing tLB

#######################
## Duplicate removal ##
#######################

#######################
# Duplicates need to be removed. Also, we will remove unmapped and reads who do not belong to primary alignments, singletons 
# and reads mapped to a different chromosome.
# The FLAG field of .bam and .sam files is an indication of a list of features for mapped reads, for a further explanation see
# https://samtools.github.io/hts-specs/SAMv1.pdf and https://broadinstitute.github.io/picard/explain-flags.html
#######################

$PROG/samtools/samtools view -b -f2 -F260 -@16 $BAMFOLD/C4PCGANXX_6.spr.bam > $BAMFOLD/$BAMFOLD/C4PCGANXX_6.sprw.bam

# To see if this step worked well, we apply samtools flagstat to check out reads. 
$PROG/samtools/samtools flagstat $BAMFOLD/C4PCGANXX_6.sprw.bam > $FLAGFOLD/fstat.C4PCGANXX_6.sprw.txt

# Time to remove duplicates with Picard Mark Duplicates. MAX_FILE_HANDLES_FOR_READ_ENDS_MAP option is based in the capacity of our server. We have set up REMOVE_DUPLICATES as true to remove duplicates and indexed the file with CREATE_INDEX

java -Xmx30G -jar $PROG/picard/picard.jar MarkDuplicates INPUT=$BAMFOLD/C4PCGANXX_6.sprw.bam \
OUTPUT=$BAMFOLD/C4PCGANXX_6.sprwr.bam METRICS_FILE=$BAMFOLD/C4PCGANXX_6.sprw.rmdupmetrics.txt \
MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=1500 REMOVE_DUPLICATES=true VALIDATION_STRINGENCY=LENIENT \
TMP_DIR=$TEMP CREATE_INDEX=true

# To see if this step worked well, we apply samtools flagstat to check out reads. 
$PROG/samtools/samtools flagstat $BAMFOLD/C4PCGANXX_6.sprwr.bam > $FLAGFOLD/fstat.C4PCGANXX_6.sprwr.txt

# This step shall be repeated for every library (C4PU7ANXX_4, C4PU7ANXX_5, C4PU7ANXX_4) of the same individual

#######################
## Merging libraries ##
#######################

# We are merging libraries AFTER removing all duplicates from each separate library. If we merge libraries before removing
# duplicates, the software might erroneously interpret the same read from two separate libraries as a duplicate. 
# In this case, we have four libraries for the same individual: C4PCGANXX_6, C4PU7ANXX_4, C4PU7ANXX_5, C4PU7ANXX_4.
# Also, we want the output of out merging process being sorted for the next step. 

$PROG/samtools/samtools merge - $BAMFOLD/C4PCGANXX_6.sprwr.bam $BAMFOLD/C4PU7ANXX_4.sprwr.bam $BAMFOLD/C4PU7ANXX_5.sprwr.bam $BAMFOLD/C4PU7ANXX_6.sprwr.bam | $PROG/samtools/samtools sort -m 500M -T $TEMP -@16 -O bam -o $BAMFOLD/SAMC009005.sprwr.bam -

# To see if this step worked well, we apply samtools flagstat to check out reads. 
$PROG/samtools/samtools flagstat $BAMFOLD/SAMC009005.sprwr.bam > $FLAGFOLD/fstat.SAMC009005.sprwr.txt

#######################
## Indel realignment ##
#######################

# Last step of the pre-processing pipeline. It is done using GATK. It involves two steps: 
# 1. Create a list of indels self assigned from local data (RealignerTargetCreator)
# 2. Use the list of indels from previous step to realign indels (IndelRealigner)

####
# Indel realignment 1st step. We create a self-generated indel database. 
java -Xmx48G -jar $PROG/GATK/GenomeAnalysisTK.jar -T RealignerTargetCreator -nct 1 -nt 24 -R $REF -I $BAMFOLD/SAMC009005.sprwr.bam -o $BAMFOLD/SAMC009005.rtc.intervals

#second step indel realignment. The list of indels has been self assigned from local data..
java -Xmx48G -jar $PROG/GATK/GenomeAnalysisTK.jar -T IndelRealigner -R $REF -targetIntervals $BAMFOLD/SAMC009005.rtc.intervals -I $BAMFOLD/SAMC009005.sprwr.bam -o $BAMFOLD/SAMC009005.sprwr_realign.bam

# To see if this step worked well, we can apply samtools flagstat to check out reads. 
$PROG/samtools/samtools flagstat $BAMFOLD/SAMC009005.sprwr_realign.bam > $FLAGFOLD/fstat.SAMC009005.sprwr_realign.txt

##########################################################################
## Divide per chromosome, extract autosomes, calculate genomewide depth ##
##########################################################################

# The software that we will use for generating genotype likelihoods, ANGSD, had different ways to work with haploid or diploid data.
# We will work with autosomal data. We will extract chromosomes 1-38 from the genomewide .bam and calculate read depth.

#########################
# First, we separate them per chromosome using samtools view.

mkdir $BAMFOLD/autosomes

for i in $(seq -w 38); do
	$PROG/samtools/samtools view -hb -@16 $BAMFOLD/SAMC009005.sprwr_realigned.bam chr${i} > $BAMFOLD/autosomes/afr_wolf.algeria.chr${i}.bam
done

$PROG/samtools/samtools view -hb -@16 SAMC009005.sprwr_realigned.bam chrX > $BAMFOLD/autosomes/afr_wolf.algeria.chrX.bam
$PROG/samtools/samtools view -hb -@16 SAMC009005.sprwr_realigned.bam chrY > $BAMFOLD/autosomes/afr_wolf.algeria.chrY.bam
$PROG/samtools/samtools view -hb -@16 SAMC009005.sprwr_realigned.bam chrMT > $BAMFOLD/autosomes/afr_wolf.algeria.chrMT.bam

#########################
# Second, we estimate average depth and standard deviation of depth per chromosome
COUNTBAM=($(ls $BAMFOLD/autosomes/*.bam | uniq)) # list of bams in /autosomes/

for sample in “${COUNTBAM[@]}”; do
  	$PROG/samtools/samtools depth -a $sample | awk '{sum+=$3; sumsq+=$3*$3} END { print "Average = ",sum/NR; print sqrt(sumsq/NR - (sum/NR)**2)}' >> $BAMFOLD/autosomes/depthdistchr.afr_wolf.algeria.txt
done

#########################
# Third, we merge autosomes.

for i in X Y MT; do 
mv $BAMFOLD/autosomes/afr_wolf.algeria.chr$i.bam $BAMFOLD/
done

$PROG/samtools/samtools merge - $BAMFOLD/autosomes/*bam | $PROG/samtools/samtools sort -m 500M -T $TEMP -@16 -O bam -o $BAMFOLD/autosomes/afr_wolf.algeria.autosomes.bam -

#########################
#Finally: we index the autosome to call genotype likelihoods later.
$PROG/samtools/samtools index $BAMFOLD/autosomes/afr_wolf.algeria.autosomes.bam

###################################
## END OF PREPROCESSING PIPELINE ##
###################################

################
## REFERENCES ##
################

# Lindblad-Toh, K., et al. (2005). Genome sequence, comparative analysis and haplotype structure of the domestic dog. Nature, 438(7069), 803–819. https://doi.org/10.1038/nature04338
# Campana, M. G., et al. (2016). Genome sequence, population history, and pelage genetics of the endangered African wild dog (Lycaon pictus). BMC Genomics, 17(1), 1–10. https://doi.org/10.1186/s12864-016-3368-9
# Liu, Y. H., et al. (2018). Whole-Genome sequencing of African dogs provides insights into adaptations against tropical parasites. Molecular Biology and Evolution, 35(2), 287–298. https://doi.org/10.1093/molbev/msx258









